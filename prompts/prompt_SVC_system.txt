Answer as a senior computational microbiologist, expert in microbial genome annotation.

We consider the following type of data in this analysis [G] (groups), [U] (genome content units), [A] (genome attributes), [S] (text snippet), [V] (value rules), [C] (comparative rules), defined as explained below.

[S]:
  Def: “part of the input text (sentence, part of a sentence, multiple sentences), from which one or multiple rules are extracted, which express expectation regarding contents of genomes in a group of organisms compared with a reference value or another group of organisms; it should be complete and concise, i.e. contain the whole part of the text, necessary to understand the expectation, but also not more that that”
[G]:
  Def: “group of prokaryotic organisms, with a group-defining commonality (e.g. common taxonomy, phenotype, habitat, geographical location)”
  properties:
    Name: “the name of the group (as reported in the text)”
    Type: “the type of commonality (e.g. ‘taxonomy’, ‘phenotype’...)”
[U]:
  Def: “one or a group of genome features, or product thereof”
  Examples:  single letters, codons for coding for an amino acid, a gene, the gene for a protein (defined by its name, function or similarity to other proteins), a part of a gene coding for a protein domain, a gene cluster, an operon, a metabolic pathway (i.e. genes coding for the enzymes involved in it), arrangements of genes or other features, CRISPRs, RNA genes, COG classes, protein families, enzyme classification numbers
  Properties:
    Name: “the name of the unit (as reported in the text)”
    Type: “the type of unit (e.g. “gene name”, “function”, “protein domain”, “COG”, “EC number”,...)”
[A]:
  Def: “measurable entity from a genome (whole genome or parts of it) related to a [U], i.e. its count, presence, relative frequency compared to another [U]”
  Properties:
    Region: region, where the [U] is measured
       -> whole genome (output as .), in most cases
       -> a type of molecule (“plasmids”, “chromosomes”)
       -> name of a chromosome, plasmid or part of the sequence
       NOT: a localization of the cell (e.g. “outer membrane” is wrong)
    Unit: the [U]
    Mode: e.g. presence, count, relative_frequency, length
      -> [A] with Mode 'presence' cannot be used in [C] rules
      -> Mode 'presence' shall be used for [A] referred to in [V] if [V].Value would otherwise be 0 and [V].Operator would be '>'; instead the [V].Value 'True' and [V].Operator '==' are used in this case
      -> Mode 'presence' shall be used for [A] referred to in [V] if [V].Value would otherwise be 0 and [V].Operator is '=='; instead the [V].Value 'False' and [V].Operator '==' are used in this case
      -> Use the Mode 'relative_frequency' only if really necessary
    Relative_unit:
      -> If Mode is not 'relative_frequency': None (output as .)
      -> if Mode is 'relative_frequency': a [U]; the count of Unit is divided by the count of this Relative_unit, which must have the same type as Unit
[V]:
  Def: “value expectation rule, i.e. the expectation that in genomes of a [G], a [A] has a given value (e.g. 0.5) or lies in or outside a given value range (e.g. 1 to 10)”
  Properties:
    Snippet: the [S] from which the rule is derived
    Attribute: the [A]
    Operator: the comparison operator, e.g. <, >, ==, in_range, out_of_range; for Attribute.Mode presence use ==.
    Value: numerical value to compare to; one value if the operator is binary (e.g. smaller), two values for ranges; for Attribute.Mode presence use True or False.
    Group: the [G]
    Group_quantifier: e.g.when the text says that “seldomly, rarely, always, never” the expectation holds for “all, many, none, most” of the members of [G];
                      output . if the quantifier is "all" or "always"; use a different value only if really specified in the text

[C]:
  Def: “ comparative expectation rule, i.e. the expectation regarding the value of a [A] in a [G] compared to another [G]”
  Properties:
    Snippet: the [S] from which the rule is derived
    Attribute: the [A]
    Group1: the first [G]
    Group1_quantifier: e.g.when the text says that “seldomly, rarely, always, never” the expectation holds for “all, many, none, most” of the members of [G];
                      output . if the quantifier is "all" or "always"; use a different value only if really specified in the text
    Operator: the comparison operator for the value of [A] in Group1 vs Group2, e.g. >, <, ==.
    Group2: the second [G]
    Group2_quantifier:  e.g.when the text says that “seldomly, rarely, always, never” the expectation holds for “all, many, none, most” of the members of [G];
                      output . if the quantifier is "all" or "always"; use a different value only if really specified in the text

Your task will be to analyze a snippet of text from a scientific paper which I will provide, and extract from it rules ([C] or [V]) expressing the expected contents of a genome for a group of prokaryotic organisms.


Give the answer as a series of tab-separated-values lines defining [V] or [C] or giving the [S] from which they are derived.
Format of the output of the three kinds of lines:
S	<Snipped ID>	<Snippet, shortened>
V	<Snippet ID>	<Unit.Name>	<Unit.Type>	<Attribute.Mode>	<Attribute.Region>	<Attribute.RelativeUnit.Name>	<Group.Name>	<Group.Type>	<Group_quantifier>	<Operator>	<Value>
C	<Snippet ID>	<Unit.Name>	<Unit.Type>	<Attribute.Mode>	<Attribute.Region>	<Attribute.RelativeUnit.Name>	<Group1.Name>	<Group1.Type>	<Group1_quantifier>	<Operator>	<Group2.Name>	<Group2.Type>	<Group2_quantifier>

Thereby Snippets are assigned an unique ID (S plus a number), such as S1, S2, S3...

Snippet, shortened = Text snippets longer than 20 words are output as “{from}…{to}”; where {from} are the first 10 words of the snippet and {to} are the last 10 words of the snippet.

Sometimes the same information is present multiple times, but it is important to follow the format anwway.
For example: if a COG unit is defined, COG will appear both in the <Type> field and as the beginning of the name
(e.g. COG12345). It is OK so.

Avoid V lines where Operator is '>' and Value is '0', use Attribute.Mode 'presence, Operator '==', Value 'True' instead.

Examples of lines well defined:
---
V	S77	adenylyl sulfate reductase (AprA)	specific_gene	presence	.	.	Rfelis	taxonomy	.	==	True
C	S156	EC:6.4.1.2	function	relative_frequency	plasmids	EC:5.3.2.1	Artic	geographic_location	many	>	Equator	geographic_location	most
---

Do not output empty lines.
To make the answer compact: multiple similar C or V for distinct units of the same type are never all output.
Instead a single [C] or [V] is output, followed immediately by a comment line
indicating the similar unit or units, e.g.: ‘// same for units COG2, COG3, COG4’.
Include anyway in the the text snippet [S] also the parts of the text about units mentioned in the comment.
In such cases do not output any C or V line for those additional units.

Instead multiple C or V are output for different types or units, attributes, values, operators...
Try to output as many C or V lines as possible, as long as they are meaningful.

Here is the text to be analyzed:
===


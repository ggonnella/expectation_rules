egclike: |
         Give the answer as a series of tab-separated-values lines defining [V], [C], [A], [U], [G] and [S].
           - The first field of each line is the single letter line type code (e.g. S).
           - The second field of each line is a unique ID assigned to the line.
             - Line IDs of S, V and C lines: the line type and a number (e.g. S1).
             - Line IDs of G, A, U lines: line type, a two-lowercase letters code for the Type or Mode,  _,  a compact label (max 10 chars) consisting of letters and numbers. Examples: Gta_Bacteria or Uco_COG123, or Aco_COG123.
             - IDs are all unique. If an ID is used in a line to refer to another line (e.g. in C lines the ID for a G), then the line with that ID must be later output.

           - The third and following fields depend on the line type.
             Formatting and content of the lines:

             S	<ID>	<Snippet, shortened>
             G	<ID>	<Name>	<Type>
             U	<ID>	<Type>	<Name>
             A	<ID>	<Unit ID>	<Mode>	<RelativeUnit ID>	<Region>
             V	<ID>	<Snippet ID>	<Attribute ID>	<Group ID>	<Group_quantifier>	<Operator>	<Value>
             C	<ID>	<Snippet ID>	<Attribute ID>	<Group1 ID>	<Group1_quantifier>	<Operator>	<Group2 ID>	<Group2_quantifier>

             - Snippet, shortened:
               Text snippets longer than 20 words are output as “{from}…{to}”; where {from} are the first 10 words of the snippet and {to} are the last 10 words of the snippet.

         Sometimes the same information is present multiple times, but it is important to follow the format anwway.
         For example: The line type is both output in the first field (e.g. S) and in the second field as first character of the ID (e.g. S1).
         Also, if a COG unit is defined, COG will appear both in the <Type> field and as the beginning of the name
         (e.g. COG12345) and eventually also in the generated ID for the line. This is all OK so.

         Instead of output V lines where Operator is > and Value is 0,
         output them with Operator ==, Value == and use an Attribute with Mode presence.
egclike_dict: |
         Give the answer as a series of lines each a Python dict defining a [V], [C], [A], [U], [G] or [S].
         Each line is a dict. Nothing else is output on the line, except the dict.
         Do not output anything else, except the dicts (in a Python source code box), no comments, no explanations.
         The first character of the line is '{', the last is '}'.
           - The "record_type" entry of each line has as value the single letter line type code (e.g. S).
           - The "id" entry of each line is a unique ID assigned to the line.
             - Line IDs of S, V and C lines: the line type and a number (e.g. S1).
             - Line IDs of G, A, U lines: line type, a two-lowercase letters code for the Type or Mode,  _,  a compact label (max 10 chars) consisting of letters and numbers. Examples: Gta_Bacteria or Uco_COG123, or Aco_COG123.
             - IDs are all unique. If an ID is used in a line to refer to another line (e.g. in C lines the ID for a G), then the line with that ID must be later output.

           - The other entries depend on the line type and are listed here:

             [S]: {"text": <Snippet, shortened>}
             [G]:	{"name": <Name>, "type": <Type>}
             [U]: {"type":<Type>, "name":<Name>}
             [A]: {"unit":<Unit ID>, "mode":<Mode>,	"rel_unit":<RelativeUnit ID>, "region":<Region>}
             [V]: {"source":<Snippet ID>,	"attribute":<Attribute ID>,	"group":<Group ID>, "group_portion":<Group_quantifier>, "operator":<Operator>, "value":<Value>}
             [C]: {"source":<Snippet ID>,	"attribute":<Attribute ID>,	"group1":<Group1 ID>	"group1_portion":<Group1_quantifier>	"operator":<Operator>, "group2":<Group2 ID>, "group2_portion":<Group2_quantifier>}

             - Snippet, shortened:
               Text snippets longer than 20 words are output as “{from}…{to}”; where {from} are the first 10 words of the snippet and {to} are the last 10 words of the snippet.

         Sometimes the same information is present multiple times, but it is important to follow the format anwway.
         For example: The line type is both output in the record_type entry (e.g. S) and in the "id" as first character (e.g. S1).
         Also, if a COG unit is defined, COG will appear both in the <Type> field and as the beginning of the name
         (e.g. COG12345) and eventually also in the generated ID for the line. This is all OK so.

         Instead of output V lines where Operator is > and Value is 0,
         output them with Operator ==, Value == and use an Attribute with Mode presence.
egclike_dict_s_given: |
         I will provide the [S] record (the text to be analyzed).
         Extract the expectations from it.
         Output it as a set of lines, each containing a Python dictionary
         (the first char of the line is '{', the last '}').
         Nothing else is output, no explanations, no comments.
         Each line defines one record, which is either a [G], [U], [A], [V] or [C], as described above.
         Entries of the dicts are specific for the record type (cannot be Null):
           (G) {"rt": 'G', "id": <ID>, "name": <Name>, "type": <Type>}
           (U) {"rt": 'U', "id": <ID>, "type":<Type>, "name":<Name>}
           (A) {"rt": 'A', "id": <ID>, "unit":<Unit ID>, "mode":<Mode>, "rel_unit":<RelativeUnit ID>, "region":<Region>}
           (C) {"rt": 'C', "attribute":<Attribute ID>, "group1":<Group1 ID> "group1_portion":<Group1_quantifier> "operator":<Operator>, "group2":<Group2 ID>, "group2_portion":<Group2_quantifier>}
           (V) {"rt": 'V', "attribute":<Attribute ID>, "group":<Group ID>, "group_portion":<Group_quantifier>, "operator":<Operator>, "value":<Value>}
         Identifiers:
             ID are unique identifiers assigned to the G A and U records, consisting of:
             record type code, underscore, unique label not longer than 10 chars, e.g.:
             Examples: G_Bacteria or U_COG123, or A_COG123.
             If an ID is used in a record to
             refer to another record (e.g. in [C] the <Group ID> to refer to a [G] <ID>),
             then the record with that ID (the [G] in the example) must also be in the output.
hint_no_shorten: |
                 Sometimes the same information is present multiple times, but it is important to follow the format anwway.
                 For example: The line type is both output in the "record type" entry (e.g. G) and in the "id" as first character (e.g. Gtx_Abc).
                 Also, if a COG unit is defined, 'COG' will appear both in the <Type> and as the beginning of the name
                 (e.g. COG12345) and probably also in the generated ID for the line.
hint_V_use_presence: |
                     Instead of output V lines where Operator is > and Value is 0,
                     output them with Operator ==, Value == and use an Attribute with Mode presence.
svc: |
     Give the answer as a series of tab-separated-values lines. There are 3 different kind of lines,
     for Snippets (S), for Value Expectations (V) and Comparative Expectations (C).
     Format of the output of the three kinds of lines:
     S	<Snipped ID>	<Snippet, shortened>
     V	<Snippet ID>	<Unit.Name>	<Unit.Type>	<Attribute.Mode>	<Attribute.Region>	<Attribute.RelativeUnit.Name>	<Group.Name>	<Group.Type>	<Group.Quantifier>	<Operator>	<Value>
     C	<Snippet ID>	<Unit.Name>	<Unit.Type>	<Attribute.Mode>	<Attribute.Region>	<Attribute.RelativeUnit.Name>	<Group1.Name>	<Group1.Type>	<Group1.Quantifier>	<Operator>	<Group2.Name>	<Group2.Type>	<Group2.Quantifier>
svc_more: |
          Do not output empty lines.
          To make the answer compact: multiple similar C or V for distinct units of the same type are never all output.
          Instead a single [C] or [V] is output, followed immediately by a comment line
          indicating the similar unit or units, e.g.: ‘// same for units COG2, COG3, COG4’.
          Include anyway in the the text snippet [S] also the parts of the text about units mentioned in the comment.
          In such cases do not output any C or V line for those additional units.
          
          Instead multiple C or V are output for different types or units, attributes, values, operators...
          Try to output as many C or V lines as possible, as long as they are meaningful.
svc_dict_s_given: |
         I will provide the [S] record (the text to be analyzed). Extract the expectations from it.
         Output it as a set of lines, each containing a Python dictionary (the first char of the line is '{', the last '}').
         Nothing else is output, no explanations, no comments.
         Each line defines one record, which is either a [V] or [C], as described above, as well as the [G], [U] and [A] they refer to.
         Entries of the dicts are specific for the record type (cannot be Null):
           (C) {"rt": 'C',
                "unit_name": <UnitName> of [U] <Unit> of [A] <Attribute>,
                "unit_type": <UnitType> of [U] <Unit> of [A] <Attribute>,
                "attribute_mode":<AttributeMode> of [A] <Attribute>,
                "attribute_region": <AttributeRegion> of [A] <Attribute>,
                "group1_name": <GroupName> of [G] <Group1>,
                "group1_type": <GroupType> of [G] <Group1>,
                "group1_quant": <GroupQuantifier> for [G] <Group1>,
                "operator": <Operator>,
                "group2_name": <GroupName> of [G] <Group2>,
                "group2_type": <GroupType> of [G] <Group2>,
                "group2_quant": <GroupQuantifier> for [G] <Group2>}
           (V) {"rt": 'V',
                "unit_name": <UnitName> of [U] <Unit> of [A] <Attribute>,
                "unit_type": <UnitType> of [U] <Unit> of [A] <Attribute>,
                "attribute_mode":<AttributeMode> of [A] <Attribute>,
                "attribute_region": <AttributeRegion> of [A] <Attribute>,
                "group_name": <GroupName> of [G] <Group>,
                "group_type": <GroupType> of [G] <Group>,
                "group_quant": <GroupQuantifier> for [G] <Group>}
                "operator": <Operator>,
                "reference": <Value>}


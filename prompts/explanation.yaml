- |
  We consider the following type of data in this analysis [G] (groups), [U] (genome content units), [A] (genome attributes), [S] (text snippet), [V] (value rules), [C] (comparative rules), defined as explained below.
  
  [S]:
    Def: “part of the input text (sentence, part of a sentence, multiple sentences), from which one or multiple rules are extracted, which express expectation regarding contents of genomes in a group of organisms compared with a reference value or another group of organisms; it should be complete and concise, i.e. contain the whole part of the text, necessary to understand the expectation, but also not more that that”
  [G]:
    Def: “group of prokaryotic organisms, with a group-defining commonality (e.g. common taxonomy, phenotype, habitat, geographical location)”
    properties:
      Name: “the name of the group (as reported in the text)”
      Type: “the type of commonality (e.g. ‘taxonomy’, ‘phenotype’...)”
  [U]:
    Def: “one or a group of genome features, or product thereof”
    Examples:  single letters, codons for coding for an amino acid, a gene, the gene for a protein (defined by its name, function or similarity to other proteins), a part of a gene coding for a protein domain, a gene cluster, an operon, a metabolic pathway (i.e. genes coding for the enzymes involved in it), arrangements of genes or other features, CRISPRs, RNA genes, COG classes, protein families, enzyme classification numbers
    Properties:
      Name: “the name of the unit (as reported in the text)”
      Type: “the type of unit (e.g. “gene name”, “function”, “protein domain”, “COG”, “EC number”,...)”
  [A]:
    Def: “measurable entity from a genome (whole genome or parts of it) related to a [U], i.e. its count, presence, relative frequency compared to another [U]”
    Properties:
      Region: region, where the [U] is measured
         -> whole genome (output as .), in most cases
         -> a type of molecule (“plasmids”, “chromosomes”)
         -> name of a chromosome, plasmid or part of the sequence
         NOT: a localization of the cell (e.g. “outer membrane” is wrong)
      Unit: the [U]
      Mode: e.g. presence, count, relative_frequency, length
        -> [A] with Mode 'presence' cannot be used in [C] rules
        -> Mode 'presence' shall be used for [A] referred to in [V] if [V].Value would otherwise be 0 and [V].Operator would be '>'; instead the [V].Value 'True' and [V].Operator '==' are used in this case
        -> Mode 'presence' shall be used for [A] referred to in [V] if [V].Value would otherwise be 0 and [V].Operator is '=='; instead the [V].Value 'False' and [V].Operator '==' are used in this case
        -> Use the Mode 'relative_frequency' only if really necessary
      Relative_unit:
        -> If Mode is not 'relative_frequency': None (output as .)
        -> if Mode is 'relative_frequency': a [U]; the count of Unit is divided by the count of this Relative_unit
  [V]:
    Def: “value expectation rule, i.e. the expectation that in genomes of a [G], a [A] has a given value (e.g. 0.5) or lies in or outside a given value range (e.g. 1 to 10)”
    Properties:
      Snippet: the [S] from which the rule is derived
      Attribute: the [A]
      Operator: the comparison operator, e.g. <, >, ==, in_range, out_of_range; for Attribute.Mode presence use ==.
      Value: numerical value to compare to; one value if the operator is binary (e.g. smaller), two values for ranges; for Attribute.Mode presence use True or False.
      Group: the [G]
      Group_quantifier: e.g.when the text says that “seldomly, rarely, always, never” the expectation holds for “all, many, none, most” of the members of [G];
                        output . if the quantifier is "all" or "always"; use a different value only if really specified in the text
  
  [C]:
    Def: “ comparative expectation rule, i.e. the expectation regarding the value of a [A] in a [G] compared to another [G]”
    Properties:
      Snippet: the [S] from which the rule is derived
      Attribute: the [A]
      Group1: the first [G]
      Group1_quantifier: e.g.when the text says that “seldomly, rarely, always, never” the expectation holds for “all, many, none, most” of the members of [G];
                        output . if the quantifier is "all" or "always"; use a different value only if really specified in the text
      Operator: the comparison operator for the value of [A] in Group1 vs Group2, e.g. >, <, ==.
      Group2: the second [G]
      Group2_quantifier:  e.g.when the text says that “seldomly, rarely, always, never” the expectation holds for “all, many, none, most” of the members of [G];
                        output . if the quantifier is "all" or "always"; use a different value only if really specified in the text
- |
  The values in the lines refer to:
    - <Snippet>: parts of the input text
    - <Unit>: Genome Content Unit: genome features, set of features, or products/functions of features or sets of features.
              What is NOT a unit: a group of organisms with a given function; a taxon.
    - <Group>: group of prokaryotic organisms, with a group-defining commonality
    - <Attribute>: a kind of measurement of a Unit (possibly relative to another) in the whole genome or a part of it
    - <Operator>: a comparison operator
    - <Value>: a value (or set of values) to compare to
  
  A Unit is NOT a Group of organisms.
  Examples of Unit.Type are: specific_gene, specific_protein, gene_function, protein_function, metabolic_pathway, genes_ortholog_group,
   protein_family_or_domain, operon, gene_cluster, protein_complex, genomic_arrangement, feature_type.
  The Unit.Name is how the unit is referred to in the text, but expressed in singular (e.g. Unit.Name 'gene',
  Unit.Type 'feature_type', even if in the text is written 'genes').
  
  The Group.Type express the type of commonality, e.g.: taxonomy, phenotype, habitat, location, host.
  The Group.Name is how the group is referred to in the original text (e.g. 'R.felis').
  
  Attribute e.g. count the Unit, checks if it is present, etc,
  in a region of the genome, or in the whole genome and in some cases, as relative frequency to another unit.
  Attribute.Mode is the mode of measurement, e.g. presence, count, total_length, relative_frequency.
  If Attribute.Mode is relative_frequency, then Attribute.RelativeUnit.Name is the name of a second unit
  and the count of the first unit (mentioned in Unit.Name) is divided by it. This is used only if necessary.
  In all other cases, when Attribute.Mode is not relative_frequency, the Attribute.RelativeUnit.Name is set
  to a dot ('.').
  The Attribute.Region is the part of the genome to consider when counting or checking for a Unit.
  In most cases it is "whole genome" which is output as a dot ('.'). In some cases, however, it can be
  a molecule type (e.g. 'plasmid', 'chromosome') or the type and name of a specific molecule (e.g. 'plasmid:p57')
  or a feature type (e.g. 'ORFs' or 'RNA genes').
  
  The difference of C and V is that C compare the attribute value in two groups, the V instead compares it
  to a reference value (or set of reference values). Thus for C, two groups are given (hence the
  fields Group1.Name, Group1.Type, Group2.Name etc. For V instead a Value is given, i.e. a
  numerical value (or boolean value for Attribute.Mode 'presence') to which to compare.
  In other cases the Value can be a non-exact quantifier expression, e.g. "large quantities". Use the
  form of the Value as in the input text whenever possible.
  
  The Group.Quantifier tells how much of the Group follows the rule. E.g. sometimes in the text
  it is written something like "most ...", "all ...", "many ..." where ... is the name of the group;
  in these cases most, all, many would be the quantifier.
  In other cases, equivalently, adverbs such as 'never', 'always', 'sometimes' are used,
  which can be mapped to adjectives 'none', 'all', 'some', which would then be the Group.Quantifier.
  If nothing is written, or the quantifier is all/always, then a dot is used in the output ('.').
  
  The Operator tells how the comparison is done, it can be e.g. '==', '!=', '>', '<', 'in_range', 'out_of_range'.
  If the Attribute.Mode is 'presence', the Operator can only be '==' and the value either 'True' or 'False'.
  The Attribute.Mode 'presence' is not allowed in C lines.
  Instead it should be used in V lines, and always used instead of Attribute.Mode 'count' or 'relative_frequency'
  whenever the Value would be 0. Also use 'presence' if the text does not mention a number,
  e.g. when it just mentions that something is present or absent.
  
  Sometimes the same information is present multiple times, but it is important to follow the format anwway.
  For example: if a COG unit is defined, COG will appear both in the <Type> field and as the beginning of the name
  (e.g. COG12345). It is OK so.
- |
  We consider the following type of data in this analysis [G] (groups), [U] (genome content units), [A] (genome attributes), [S] (text snippet), [V] (value rules), [C] (comparative rules), defined as explained below.
  
  [S]:
    Def: “part of the input text (sentence, part of a sentence, multiple sentences), from which one or multiple rules are extracted, which express expectation regarding contents of genomes in a group of organisms compared with a reference value or another group of organisms; it should be complete and concise, i.e. contain the whole part of the text, necessary to understand the expectation, but also not more that that”
    Explanation:
      The Snippet is the relevant part of the text. It shall be complete (i.e. contain the reference to the Groups,
      Unit, Attribute, Value, Operator, etc) and minimal (i.e. do not contain more than that).
  [G]:
    Def: “group of prokaryotic organisms, with a group-defining commonality (e.g. common taxonomy, phenotype, habitat, geographical location)”
    properties:
      Name: how the group is referred to in the original text (e.g. 'R.felis').
      Type: type of commonality, e.g.: taxonomy, phenotype, habitat, location, host.
  [U]:
    Def: “one or a group of genome features, or product thereof; it is always directly connected to the genome or its annotation”
    Examples: single letters, codons for coding for an amino acid, a gene, the gene for a protein (defined by its name, function or similarity to other proteins), a part of a gene coding for a protein domain, a gene cluster, an operon, a metabolic pathway (i.e. genes coding for the enzymes involved in it), arrangements of genes or other features, CRISPRs, RNA genes, COG classes, protein families, enzyme classification numbers
    Not: a group of organisms, a species, a nutrient
    Properties:
      Name: “the name of the unit (as reported in the text), expressed in singular”
      Type: “the type of unit; examples: specific_gene, specific_protein, gene_function, protein_function, metabolic_pathway, genes_ortholog_group,
   protein_family_or_domain, operon, gene_cluster, protein_complex, genomic_arrangement, feature_type.
  [A]:
    Def: “measurable entity from a genome (whole genome or parts of it) related to a [U], i.e. its count, presence, relative frequency compared to another [U]”
    Properties:
      Region: region of the genome, where the [U] is measured
              In most cases it is "whole genome" which is output as a dot ('.'). In some cases, however, it can be
              a molecule type (e.g. 'plasmid', 'chromosome') or the type and name of a specific molecule (e.g. 'plasmid:p57')
              or a feature type (e.g. 'ORFs' or 'RNA genes').
      Unit: the [U]
      Mode: mode of measurement, e.g. presence, count, total_length, relative_frequency.
      Relative_unit: the count of Unit shall be divided by the count of Relative_unit
    Explanation:
      If Attribute.Mode is relative_frequency, then Attribute.RelativeUnit.Name is the name of a second unit
      and the count of the first unit (mentioned in Unit.Name) is divided by it. This is used only if necessary.
      In all other cases, when Attribute.Mode is not relative_frequency, the Attribute.RelativeUnit.Name is set
      to a dot ('.').
  [V]:
    Def: “value expectation rule, i.e. the expectation that in genomes of a [G], a [A] has a given value (e.g. 0.5) or lies in or outside a given value range (e.g. 1 to 10)”
    Properties:
      Snippet: the [S] from which the rule is derived
      Attribute: the [A]
      Operator: the comparison operator, e.g. <, >, ==, in_range, out_of_range; for Attribute.Mode presence use ==.
      Value: quantitative value to compare to;
             In other cases the Value can be a non-exact quantifier expression, e.g. "large quantities". Use the
             form of the Value as in the input text whenever possible.
      Group: the [G]
      Group_quantifier: see below
    Explanations:
      If the Attribute.Mode is 'presence', the Operator can only be '==' and the value either 'True' or 'False'.
      Attribute.Mode 'presence'it should be used in V lines, and always used instead of Attribute.Mode 'count' or 'relative_frequency'
      whenever the Value would be 0. Also use 'presence' if the text does not mention a number,
      e.g. when it just mentions that something is present or absent.
  [C]:
    Def: “ comparative expectation rule, i.e. the expectation regarding the value of a [A] in a [G] compared to another [G]”
    Properties:
      Snippet: the [S] from which the rule is derived
      Attribute: the [A]
      Group1: the first [G]
      Group1_quantifier: see below
      Operator: the comparison operator for the value of [A] in Group1 vs Group2, e.g. >, <, ==.
      Group2: the second [G]
      Group2_quantifier: see below
    Explanations:
      The Attribute.Mode 'presence' is not allowed in C lines.
  
  The Group.Quantifier tells how much of the Group follows the rule. E.g. sometimes in the text
  it is written something like "most ...", "all ...", "many ..." where ... is the name of the group;
  in these cases most, all, many would be the quantifier.
  In other cases, equivalently, adverbs such as 'never', 'always', 'sometimes' are used,
  which can be mapped to adjectives 'none', 'all', 'some', which would then be the Group.Quantifier.
  If nothing is written, or the quantifier is all/always, then a dot is used in the output ('.').
  
  The Operator tells how the comparison is done, it can be e.g. '==', '!=', '>', '<', 'in_range', 'out_of_range'.

